@using DataAccess
@model TransferViewModel

@{
    ViewData["Title"] = "Transfer money";
}

<p class="text-center transfer__label transfer__label--info">Transfer money</p>

<form asp-action="transfer" asp-controller="transfers" asp-anti-forgery="true">
    <div>
        <ul>
            @foreach (var item in Model.CardAccounts)
            {
                <li class="p transfer__label">Card number: @item.CardNumber (balance: @item.CardBalance)</li>
            }
        </ul>

        <p class="transfer__label transfer__label--info">Where to withdraw money</p>

        <select asp-for="SelectCardNumber">
            <option>Choose your card</option>

            @foreach (var item in Model.CardAccounts)
            {
                <option>@item.CardNumber</option>
            }
        </select>

        <p class="transfer__label transfer__label--info">Where to transfer</p>

        <div>
            <input id="transferCardNumber" asp-for="TransferCardNumber" placeholder="Transfer card number" />
            <button id="checkCardNumber" type="button">Check</button>
            <p id="cardNumberValidation"></p>
        </div>

        <div>
            <input asp-for="TransferBalance" placeholder="Transfer balance" /> <d1>KGS</d1>
        </div>

        <div>
            <button class="transfer__submit">Transfer</button>
        </div>
        
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success" role="alert">
                @TempData["SuccessMessage"]
            </div>
        }

        <div class="text-center transfer__label--error">
            @Html.ValidationMessage("ErrorMessage_Id")
        </div>
    </div>
</form>

<style>
    .transfer__label {
        font-size: 21px;
    }

    .transfer__label--info {
        background-color: darkgray;
        color: white
    }

    .transfer__label--error {
        color: red;
    }

    .transfer__submit {
        background-color: darkred;
        color: white
    }

    .transfer__cardnum-validation--ok {
        color: green;
    }

    .transfer__cardnum-validation--error {
        color: red;
    }
</style>

<script>
    async function fetchCardAccount(cardNumber) {
        const url = '@Url.Action("CheckCardNumber")'

        try {
            const response = await fetch(`${url}?cardNumber=${cardNumber}`)

            if (!response.ok) {
                const error = await response.text()

                return [false, error]
            }

            const data = await response.json()

            const valid = data.statusId === @((int) Statuses.worked)

            const message = valid
                ? data.firstName || data.lastName
                    ? `${data.firstName} ${data.lastName}`
                    : data.userName || 'Account is found'
                : 'Card is blocked or frozen'

            return [valid, message]
        } catch {
            return [false, 'Network error']
        }
    }

    function setValidationMessage(valid, message) {
        const validationNode = document.querySelector('#cardNumberValidation')

        validationNode.className = valid
            ? 'transfer__cardnum-validation--ok'
            : 'transfer__cardnum-validation--error'

        validationNode.textContent = message
    }

    const checkButton = document.querySelector("#checkCardNumber")

    checkButton.addEventListener('click', async function () {
        const cardNumber = document.querySelector('#transferCardNumber').value

        const [valid, message] = await fetchCardAccount(cardNumber)

        setValidationMessage(valid, message)
    })
</script>
